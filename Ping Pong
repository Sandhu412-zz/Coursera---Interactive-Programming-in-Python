In this project, we will build a version of Pong, one of the first arcade video games (1972). While Pong is not particularly exciting compared to today's video games, Pong is relatively simple to build and provides a nice opportunity to work on the skills that you will need to build a game like Asteroids



# Implementation of classic arcade game Pong

import simplegui
import random

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 600
HEIGHT = 400       
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
LEFT = False
RIGHT = True
ball_pos = [WIDTH / 2, HEIGHT / 2]
ball_vel = [0, 0]
ball_vel1 = [0,0]
paddle1_pos = HEIGHT / 2
paddle2_pos = HEIGHT / 2
paddle1_vel = 0
paddle2_vel = 0
score1 = 0
score2 = 0

# initialize ball_pos and ball_vel for new bal in middle of table
# if direction is RIGHT, the ball's velocity is upper right, else upper left
def spawn_ball(direction):
    global ball_pos, ball_vel # these are vectors stored as lists
    ball_pos = [WIDTH / 2, HEIGHT / 2]
    if direction == RIGHT:
        ball_vel = [random.randrange(120, 240)/60.0, -(random.randrange(60, 180)/60.0)]
    elif direction == LEFT:    
        ball_vel = [-(random.randrange(120, 240)/60.0), -(random.randrange(60, 180)/60.0)]

# define event handlers
def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel  # these are numbers
    global score1, score2 # these are ints
    score1 = 0
    score2 = 0
    spawn_ball(LEFT)
    

def draw(canvas):
    global score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel, paddle1_vel, paddle2_vel, ball_vel1
 
        
    # draw mid line and gutters
    canvas.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    canvas.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    canvas.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")
        
    # Update ball position
    ball_pos[0] += ball_vel[0]
    ball_pos[1] += ball_vel[1]
    
    # collide and reflect off of left hand side of canvas
    #if ball_pos[0] <= (BALL_RADIUS + PAD_WIDTH):
     #   spawn_ball(RIGHT)
        
    # collide and reflect off of right hand side of canvas
    #if ball_pos[0] >= (WIDTH-1)- (BALL_RADIUS + PAD_WIDTH):
       # spawn_ball(LEFT)
                
    # collide and reflect off of top of the canvas
    if ball_pos[1] <= BALL_RADIUS:
        ball_vel[1] = - ball_vel[1]
        
    # collide and reflect off of bottom of the canvas
    if ball_pos[1] >= (HEIGHT-1)- BALL_RADIUS:
        ball_vel[1] = - ball_vel[1]
    
    # update paddle's vertical position, keep paddle on the screen
    # left paddle vertical position update
    if (paddle1_pos + paddle1_vel) >= HALF_PAD_HEIGHT:
        paddle1_pos += paddle1_vel
    else:
        paddle1_pos = HALF_PAD_HEIGHT
        
    if (paddle1_pos + paddle1_vel) <= ((HEIGHT - 1) - HALF_PAD_HEIGHT):
        paddle1_pos += paddle1_vel
    else:
        paddle1_pos = HEIGHT - 1 - HALF_PAD_HEIGHT
        
    # right paddle vertical position update
    if (paddle2_pos + paddle2_vel) >= HALF_PAD_HEIGHT:
        paddle2_pos += paddle2_vel
    else:
        paddle2_pos = HALF_PAD_HEIGHT
        
    if (paddle2_pos + paddle2_vel) <= ((HEIGHT - 1) - HALF_PAD_HEIGHT):
        paddle2_pos += paddle2_vel
    else:
        paddle2_pos = HEIGHT - 1 - HALF_PAD_HEIGHT
    
    
    # draw paddles
    # left paddle
    canvas.draw_line([HALF_PAD_WIDTH, (paddle1_pos - HALF_PAD_HEIGHT)],[HALF_PAD_WIDTH, paddle1_pos + HALF_PAD_HEIGHT], PAD_WIDTH, 'White')
    # right paddle
    canvas.draw_line([(WIDTH - HALF_PAD_WIDTH), (paddle2_pos-HALF_PAD_HEIGHT)], [(WIDTH-HALF_PAD_WIDTH),(paddle2_pos + HALF_PAD_HEIGHT) ], PAD_WIDTH, 'white')
    
    
    # determine whether paddle and ball collide   
    if ball_pos[0] <= (BALL_RADIUS + PAD_WIDTH):
        if ball_pos[1] <= (paddle1_pos + HALF_PAD_HEIGHT) and ball_pos[1] >= (paddle1_pos - HALF_PAD_HEIGHT):
            ball_vel[0] = - (ball_vel[0] + (10.0/100.0 * ball_vel[0]))
            ball_vel[1] = (ball_vel[1] + (10.0/100.0 * ball_vel[1]))
        else: 
            score2 += 1
            spawn_ball(RIGHT)

    if ball_pos[0] >= (WIDTH-1)- (BALL_RADIUS + PAD_WIDTH):
        if ball_pos[1] <= (paddle2_pos + HALF_PAD_HEIGHT) and ball_pos[1] >= (paddle2_pos - HALF_PAD_HEIGHT):
            ball_vel[0] = - (ball_vel[0] + (10.0/100.0 * ball_vel[0]))
            ball_vel[1] = (ball_vel[1] + (10.0/100.0 * ball_vel[1]))
        else: 
            score1 += 1
            spawn_ball(LEFT)

    # draw ball
    canvas.draw_circle(ball_pos, BALL_RADIUS, 2, "Red", "White")
    canvas.draw_text(str(score1), [200, 100], 30, "White")
    canvas.draw_text(str(score2), [400, 100], 30, "White")

    
def keydown(key):
    global paddle1_vel, paddle2_vel
    if key == simplegui.KEY_MAP["w"]:
        paddle1_vel -= 5
    elif key == simplegui.KEY_MAP["s"]:
        paddle1_vel += 5
    elif key == simplegui.KEY_MAP["down"]:
        paddle2_vel += 5
    elif key == simplegui.KEY_MAP["up"]:
        paddle2_vel -= 5

def keyup(key):
    global paddle1_vel, paddle2_vel
    if key == simplegui.KEY_MAP["w"]:
        paddle1_vel = 0
    elif key == simplegui.KEY_MAP["s"]:
        paddle1_vel = 0
    elif key == simplegui.KEY_MAP["down"]:
        paddle2_vel = 0
    elif key == simplegui.KEY_MAP["up"]:
        paddle2_vel = 0


# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
frame.add_button("Restart", new_game)


# start frame
new_game()
frame.start()
